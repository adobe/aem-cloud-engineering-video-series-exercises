/publishfarm {  
	
    # client headers which should be passed through to the render instances
	# (feature supported since dispatcher build 2.6.3.5222)
	/clientheaders {
        # $include "../clientheaders/ams_publish_clientheaders.any"
        # Any publish specific clientheaders go here
        # $include "../clientheaders/ams_common_clientheaders.any"
        "X-Forwarded-Proto"
        "X-Forwarded-SSL-Certificate"
        "X-Forwarded-SSL-Client-Cert"
        "X-Forwarded-SSL"
        "X-Forwarded-Protocol"
        "CSRF-Token"
        "referer"
        "user-agent"
        "from"
        "content-type"
        "content-length"
        "accept-charset"
        "accept-encoding"
        "accept-language"
        "accept"
        "host"
        "if-match"
        "if-none-match"
        "if-range"
        "if-unmodified-since"
        "max-forwards"
        "range"
        "cookie"
        "depth"
        "translate"
        "expires"
        "date"
        "if"
        "lock-token"
        "x-expected-entity-length"
        "destination"
        "Sling-uploadmode"
        "x-requested-with"
            }
	
    # hostname globbing for farm selection (virtual domain addressing)
	/virtualhosts {
# $include "../vhosts/ams_publish_vhosts.any"
# Put hostnames that would be honored for publish blob matching works.
"${PUBLISH_DEFAULT_HOSTNAME}"
	   }
        
    # the load will be balanced among these render instances
	/renders {
 $include "../renders/default_renders.any"

            }

	# only handle the requests in the following acl. default is 'none'
	# the glob pattern is matched against the first request line
	/filter {
# $include "../filters/ams_publish_filters.any"
# deny everything and allow specific entries
# Start with everything blocked as a safeguard and open things customers need and what's safe OOTB
/0001 { /type "deny"  /url "*" }

# Open consoles if this isn't a production environment by uncommenting the next few lines
# /002 { /type "allow" /url "/crx/*"    }  # allow content repository
# /003 { /type "allow" /url "/system/*" }  # allow OSGi console

# allow non-public content directories if this isn't a production environment by uncommenting the next few lines
# /004 { /type "allow" /url "/apps/*"   }  # allow apps access
# /005 { /type "allow" /url "/bin/*"    }  # allow bin path access

# This rule allows content to be access
/0010 { /type "allow" /extension '(css|eot|gif|ico|jpeg|jpg|js|gif|pdf|png|svg|swf|ttf|woff|woff2|html)' /path "/content/*" }  # disable this rule to allow mapped content only
/0011 { /type "allow" /extension "json" /selectors "model" /path "/content/*" }

# Enable specific mime types clientlibs directories
/0012 { /type "allow" /method "GET" /extension '(css|eot|gif|ico|jpeg|jpg|js|gif|png|svg|swf|ttf|woff|woff2)' /path "/etc/clientlibs/*" }

# Enable clientlibs proxy servlet
/0013 { /type "allow" /method "GET" /url "/etc.clientlibs/*" }

# Enable basic features
/0014 { /type "allow" /method "GET" /url '/libs/granite/csrf/token.json' /extension 'json' } # AEM provides a framework aimed at preventing Cross-Site Request Forgery attacks
/0015 { /type "allow" /method "POST" /url "/content/[.]*.form.html" }  # allow POSTs to form selectors under content

/0016 { /type "allow" /method "GET" /path "/libs/cq/personalization" }  # enable personalization
/0017 { /type "allow" /method "POST" /path "/content/[.]*.commerce.cart.json" }  # allow POSTs to update the shopping cart

# Deny content grabbing for greedy queries and prevent un-intended self DOS attacks
/0100 { /type "deny" /selectors '(feed|rss|pages|languages|blueprint|infinity|tidy|sysview|docview|query|[0-9-]+|jcr:content)' /extension '(json|xml|html|feed)' }

# Deny authoring query params
/0101 { /type "deny" /method "GET" /query "debug=*" }
/0102 { /type "deny" /method "GET" /query "wcmmode=*" }
# Deny front door entry
/0103 { /type "deny" /path "/content/ams/healthcheck/*" }
/0104 { /type "deny" /url "/content/regent.html" }

# Enable specific mime types clientlibs directories
/0105 { /type "allow" /extension '(gltf|stl|obj|usdz|glb)' /method "GET" /path "/content/dam/*" }

	}
	# if the package is installed on publishers to generate a list of all content with a vanityurl attached
	# this section will auto-allow the items to bypass the normal dispatcher filters
	# Reference: https://docs.adobe.com/docs/en/dispatcher/disp-config.html#Enabling%20Access%20to%20Vanity%20URLs%20-%20/vanity_urls
	/vanity_urls {
		/url    "/libs/granite/dispatcher/content/vanityUrls.html"
		/file   "/tmp/vanity_urls"
		/delay  300
	}
	# allow propagation of replication posts (should seldomly be used)
	/propagateSyndPost "0"
	# the cache is used to store requests from the renders for faster delivery
	# for a second time.
	/cache {
		# The cacheroot must be equal to the document root of the webserver
		/docroot "${DOCROOT}"
		# sets the level upto which files named ".stat" will be created in the
		# document root of the webserver. when an activation request for some
		# handle is received, only files within the same subtree are affected
		# by the invalidation.
		/statfileslevel "2"
		# caches also authorized data
		/allowAuthorized "0"
		# Flag indicating whether the dispatcher should serve stale content if
		# no remote server is available.
		/serveStaleOnError "1"
		
        # the rules define, which pages should be cached. please note that
		# - only GET requests are cached
		# - only requests with an extension are cached
		# - only requests without query parameters ( ? ) are cached
		# - only unauthorized pages are cached unless allowUnauthorized is set to 1
		/rules {
# $include "../cache/ams_publish_cache.any"
# Put entries of items you do or don't want to cache in apaches doc root
# the globbing pattern to be compared against the url
# example: *             -> everything
#        : /foo/bar.*    -> only the /foo/bar documents
#        : /foo/bar/*    -> all pages below /foo/bar
#        : /foo/bar[./]* -> all pages below and /foo/bar itself
#        : *.html        -> all .html files
# Default allow all items to cache
/0000 {
	/glob "*"
	/type "allow"
}
# Don't cache csrf login tokens
/0001 {
	/glob "/libs/granite/csrf/token.json"
	/type "deny"
}
		}
		# the invalidate section defines those pages which are 'invalidated' after
		# any activation. please note that, the activated page itself and all 
		# related documents are flushed on an modification. for example: if the 
		# page /foo/bar is activated, all /foo/bar.* files are removed from the
		# cache.
		/invalidate {
			/0000 {
				/glob "*"
				/type "deny"
			}
			/0001 {
				/glob "*.html"
				/type "allow"
			}
		}
		/allowedClients {
 $include "../cache/default_invalidate.any"

			
			# Allow certain IP's like publishers to invalidate cache
# $include "../cache/ams_publish_invalidate_allowed.any"
# This is where you'd put an entry for each publisher or author that you want to allow to invalidate the cache on the dispatcher
/0 {
	/glob "${AUTHOR_IP}"
	/type "allow"
}
/01 {
	/glob "${PUBLISH_IP}"
	/type "allow"
}
}
		# The ignoreUrlParams section contains query string parameter names that
		# should be ignored when determining whether some request's output can be
		# cached or delivered from cache.
		# In this example configuration, the "q" parameter will be ignored.
		# /ignoreUrlParams {
		#	/0001 { /glob "*" /type "deny" }
		#	/0002 { /glob "q" /type "allow" }
		# }

		# Cache response headers next to a cached file. On the first request to
		# an uncached resource, all headers matching one of the values found here
		# are stored in a separate file, next to the cache file. On subsequent
		# requests to the cached resource, the stored headers are added to the
		# response.
		# Note, that file globbing characters are not allowed here.
		/headers {
			"Cache-Control"
			"Content-Disposition"
			"Content-Type"
			"Expires"
			"Last-Modified"
			"X-Content-Type-Options"
		}
		# A grace period defines the number of seconds a stale, auto-invalidated
		# resource may still be served from the cache after the last activation
		# occurring. Auto-invalidated resources are invalidated by any activation,
		# when their path matches the /invalidate section above. This setting
		# can be used in a setup, where a batch of activations would otherwise
		# repeatedly invalidate the entire cache.
		# /gracePeriod "2"

		# Enable TTL evaluates the response headers from the backend, and if they
		# contain a Cache-Control max-age or Expires date, an auxiliary, empty file
		# next to the cache file is created, with modification time equal to the
		# expiry date. When the cache file is requested past the modification time
		# it is automatically re-requested from the backend.
		# /enableTTL "1"
	}
}










