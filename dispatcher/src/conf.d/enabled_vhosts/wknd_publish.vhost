# Collect any enviromental variables that are set in /etc/sysconfig/httpd
# Collect the dispatchers number
PassEnv DISP_ID

<VirtualHost *:80>
	ServerName	publish
	# Put names of which domains are used for your published site/content here
	ServerAlias	*
	# Use a doc root that matches what's in the /etc/httpd/conf/publish-farm.any
	DocumentRoot	${DOCROOT}
	# Add header breadcrumbs for help in troubleshooting
	<IfModule mod_headers.c>
		Header always add X-Dispatcher ${DISP_ID}
		Header always add X-Vhost "publish"
		Header merge X-Frame-Options SAMEORIGIN "expr=%{resp:X-Frame-Options}!='SAMEORIGIN'"
		Header merge X-Content-Type-Options nosniff "expr=%{resp:X-Content-Type-Options}!='nosniff'"
		# Make sure proxies don't deliver the wrong content
		Header append Vary User-Agent env=!dont-vary
	</IfModule>
	<Directory />
		# Update /etc/sysconfig/httpd with setting the PUBLISH_WHITELIST_ENABLED from 0 or 1 to enable or disable ip restriction rules
		<If "${PUBLISH_WHITELIST_ENABLED} == 1">
# Include conf.d/whitelists/*_whitelist.rules
	# Include this in a directory context of the virtual host you want to restrict and apply a whitelist of IP's

# Here are some examples:
# Regular expressions are used for X-FORWARDED-FOR if your dispatcher is behind a load balancer
# SetEnvIf X-FORWARDED-FOR ^199\.83\.(12[8-9]|13[0-5])\.[0-9]{1,3}$ AllowIP
# SetEnvIf X-FORWARDED-FOR ^198\.143\.(3[2-9]|[4-5][0-9]|6[0-3])\.[0-9]{1,3}$ AllowIP

# Setup a require any section so if any rules in there are matched it will allow them in
<RequireAny>
	# We make sure the environment variable AllowIP is enforced
	Require env AllowIP
	# Here are some rules for CIDR ip blocks and single addresses
	# Require ip 192.150.16.0/23
	# Require ip 120.242.180.10
</RequireAny>

		</If>
		<IfModule disp_apache2.c>
			# Some items cache with the wrong mime type
			# Use this option to use the name to auto-detect mime types when cached improperly
			ModMimeUsePathInfo On
			# Use this option to avoid cache poisioning
			# Sling will return /content/image.jpg as well as /content/image.jpg/ but apache can't search /content/image.jpg/ as a file
			# Apache will treat that like a directory.  This assures the last slash is never stored in cache
			DirectorySlash Off
			# Enable the dispatcher file handler for apache to fetch files from AEM
			SetHandler dispatcher-handler
		</IfModule>
		Options FollowSymLinks
		AllowOverride None
		# Insert filter
		SetOutputFilter DEFLATE
		# Don't compress images
		SetEnvIfNoCase Request_URI \
		\.(?:gif|jpe?g|png)$ no-gzip dont-vary
	</Directory>
	<Directory "${DOCROOT}">
		AllowOverride None
		Require all granted
	</Directory>
	<IfModule disp_apache2.c>
		# Enabled to allow rewrites to take affect and not be ignored by the dispatcher module
		DispatcherUseProcessedURL	1
		# Default setting to allow all errors to come from the aem instance
		DispatcherPassError		0
	</IfModule>
	<IfModule mod_rewrite.c>
		ReWriteEngine	on
		# LogLevel warn rewrite:info
		# Global rewrite include
# Include conf.d/rewrites/base_rewrite.rules
	# This file is used to apply rewrite rules as an include.
# Consider the base file here as a global for re-use

# Examples:
# This ruleset would look for robots.txt and fetch it from the dam only if the domain is exampleco-dev.adobecqms.net
# RewriteCond %{SERVER_NAME} exampleco-dev.adobecqms.net [NC]
# RewriteRule ^/robots.txt$ /content/dam/exampleco/robots.txt [NC,PT]
# This ruleset would look for favicon.ico in exampleco's base dam folder if the domain is exampleco-brand1-dev.adobecqms.net
# RewriteCond %{SERVER_NAME} exampleco-brand1-dev.adobecqms.net [NC]
# RewriteRule ^/favicon.ico$ /content/dam/exampleco/favicon.ico [NC,PT]
# This ruleset would look for sitemap.xml and point it at the re-usable file in exampleco's general folder of their site pages
# RewriteCond %{SERVER_NAME} exampleco-brand2-dev.adobecqms.net [NC]
# RewriteRule ^/sitemap.xml$ /content/exampleco/general/sitemap.xml [NC,PT]
# This ruleset would look for logo.jpg on all sites and source it from exampleco's general folder
# RewriteRule ^/logo.jpg$ /content/dam/exampleco/general/logo.jpg [NC,PT]

# This ruleset is a vanity url that exampleco's contactus site that doesn't exist on our environment
# RewriteRule ^/contactus https://corp.exampleco.com/contactus.html [NC,R=301]

# Prevent X-FORWARDED-FOR spoofing
RewriteCond %{HTTP:X-Forwarded-For} !^$
RewriteCond %{HTTP:X-Forwarded-For} !^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
# For IPv6
RewriteCond %{HTTP:X-Forwarded-For} !^([0-9A-Fa-f]{0,4}:){2,7}([0-9A-Fa-f]{1,4}$|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4})
RewriteCond %{HTTP:X-Forwarded-For} !^[a-fA-F0-9:]+,?.*
RewriteRule .* - [F]

# Uncomment to force HSTS protection
# Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains;"

# Block wordpress DDOS Attempts
RewriteRule ^.*xmlrpc.php - [F]
RewriteCond %{HTTP_USER_AGENT} ^.*wordpress [NC]
RewriteRule .* - [F]

# Block wp-login
RewriteRule ^.*wp-login - [F,NC,L]

# Include conf.d/rewrites/wknd_rewrite.rules
	# rewrite for root redirect
RewriteRule ^/?$ /content/${CONTENT_FOLDER_NAME}/us/en.html [PT,L]

RewriteCond %{REQUEST_URI} !^/apps
RewriteCond %{REQUEST_URI} !^/bin
RewriteCond %{REQUEST_URI} !^/content
RewriteCond %{REQUEST_URI} !^/etc
RewriteCond %{REQUEST_URI} !^/home
RewriteCond %{REQUEST_URI} !^/libs
RewriteCond %{REQUEST_URI} !^/saml_login
RewriteCond %{REQUEST_URI} !^/system
RewriteCond %{REQUEST_URI} !^/tmp
RewriteCond %{REQUEST_URI} !^/var
RewriteCond %{REQUEST_URI} (.html|.jpe?g|.png|.svg)$
RewriteRule ^/(.*)$ /content/${CONTENT_FOLDER_NAME}/$1 [PT,L]
		# Update /etc/sysconfig/httpd with setting the PUBLISH_FORCE_SSL from 0 or 1 to enable or disable enforcing SSL
		<If "${PUBLISH_FORCE_SSL} == 1">
# Include conf.d/rewrites/xforwarded_forcessl_rewrite.rules
	# This ruleset forces https in the end users browser
RewriteCond %{HTTP:X-Forwarded-Proto} !https
RewriteCond %{REQUEST_URI} !^/dispatcher/invalidate.cache
RewriteRule (.*) https://%{SERVER_NAME}%{REQUEST_URI} [L,R=301]
		</If>
	</IfModule>
</VirtualHost>





